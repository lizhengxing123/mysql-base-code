# 索引

# 1、按照存储方式分类
-- 哈希索引
-- 树型索引
-- 全文索引

# 2、按照字段分类
-- 主键索引
-- 唯一索引
-- 普通索引
-- 全文索引

# 3、按照存储位置分类
-- 聚集索引：索引和数据存储在一起，有且只有一个
-- 如果存在主键，主键索引就是聚集索引
-- 如果不存在主键，会选择第一个唯一索引作为聚集索引
-- 如果不存在主键和唯一索引，Innodb 会自动生成一个 rowid 作为隐藏的聚集索引
-- 二级索引：索引和数据存储分离，存储的是数据的引用，到时候可以回表查询

# Innodb 主键索引的 B+tree 高度有多高呢
-- 高度为 2 的 B+tree，非叶子节点，一页中，指针占6个字节，主键占8个字节
-- 存储的key数量为：n * 8 + (n + 1) * 6 = 16 * 1024 --> n = 1170，那么指针就是1171个
-- 而叶子结点：一行就是1k，每页中可以存储 16 行数据
-- 所以，能存储的数据量最大就是 1171 * 16 = 18736

-- 高度为 3 的 B+tree
-- 能存储的数据量最大就是 1171 * 1171 * 16 = 21939856

create database db1;

use db1;

show tables;

create table if not exists tb_user
(
    id          int auto_increment,
    name        varchar(20),
    phone       varchar(20),
    email       varchar(50),
    profession  varchar(20),
    age         int,
    gender      int,
    status      int,
    create_time datetime,
    constraint pk_id primary key (id)
);

# 为 tb_user 生成30条假数据，姓名以王者荣耀英雄名称命名
# 将 create_time 修改为2025年随机的时间,且不要重复
INSERT INTO tb_user (name, phone, email, profession, age, gender, status, create_time)
VALUES ('亚瑟', '13800138001', 'yase@example.com', '战士', 28, 1, 1, '2025-01-01 10:00:00'),
       ('妲己', '13900139002', 'daji@example.com', '法师', 22, 0, 1, '2025-01-02 10:00:00'),
       ('孙悟空', '13700137003', 'sunwukong@example.com', '刺客', 30, 1, 1, '2025-01-03 10:00:00'),
       ('韩信', '13600136004', 'hanxin@example.com', '刺客', 26, 1, 1, '2025-01-04 10:00:00'),
       ('赵云', '13500135005', 'zhaoyun@example.com', '战士', 27, 1, 1, '2025-01-05 10:00:00'),
       ('貂蝉', '13400134006', 'diaochan@example.com', '法师', 24, 0, 1, '2025-01-06 10:00:00'),
       ('吕布', '13300133007', 'lvbu@example.com', '战士', 32, 1, 1, '2025-01-07 10:00:00'),
       ('甄姬', '13200132008', 'zhenji@example.com', '法师', 25, 0, 1, '2025-01-08 10:00:00'),
       ('典韦', '13100131009', 'dianwei@example.com', '战士', 35, 1, 1, '2025-01-09 10:00:00'),
       ('安琪拉', '13000130010', 'anqila@example.com', '法师', 21, 0, 1, '2025-01-10 10:00:00'),
       ('后羿', '13800138011', 'houyi@example.com', '射手', 29, 1, 1, '2025-01-11 10:00:00'),
       ('鲁班七号', '13900139012', 'luban7@example.com', '射手', 18, 1, 1, '2025-01-12 10:00:00'),
       ('孙尚香', '13700137013', 'sunshangxiang@example.com', '射手', 23, 0, 1, '2025-01-13 10:00:00'),
       ('铠', '13600136014', 'kai@example.com', '战士', 28, 1, 1, '2025-01-14 10:00:00'),
       ('百里守约', '13500135015', 'bailishouyue@example.com', '射手', 26, 1, 1, '2025-01-15 10:00:00'),
       ('不知火舞', '13400134016', 'buzhihuowu@example.com', '法师', 24, 0, 1, '2025-01-16 10:00:00'),
       ('程咬金', '13300133017', 'chengjiang@example.com', '坦克', 38, 1, 1, '2025-01-17 10:00:00'),
       ('项羽', '13200132018', 'xiangyu@example.com', '坦克', 33, 1, 1, '2025-01-18 10:00:00'),
       ('虞姬', '13100131019', 'yuji@example.com', '射手', 25, 0, 1, '2025-01-19 10:00:00'),
       ('张良', '13000130020', 'zhangliang@example.com', '法师', 31, 1, 1, '2025-01-20 10:00:00'),
       ('兰陵王', '13800138021', 'lanlingwang@example.com', '刺客', 29, 1, 1, '2025-01-21 10:00:00'),
       ('花木兰', '13900139022', 'mulan@example.com', '战士', 27, 0, 1, '2025-01-22 10:00:00'),
       ('宫本武藏', '13700137023', 'gongbenwuzang@example.com', '战士', 34, 1, 1, '2025-01-23 10:00:00'),
       ('妲己', '13600136024', 'daji2@example.com', '法师', 22, 0, 1, '2025-01-24 10:00:00'),
       ('雅典娜', '13500135025', 'yadianna@example.com', '战士', 26, 0, 1, '2025-01-25 10:00:00'),
       ('钟馗', '13400134026', 'zhongkui@example.com', '坦克', 40, 1, 1, '2025-01-26 10:00:00'),
       ('李元芳', '13300133027', 'liyuanfang@example.com', '射手', 23, 1, 1, '2025-01-27 10:00:00'),
       ('张飞', '13200132028', 'zhangfei@example.com', '坦克', 35, 1, 1, '2025-01-28 10:00:00'),
       ('关羽', '13100131029', 'guanyu@example.com', '战士', 36, 1, 1, '2025-01-29 10:00:00'),
       ('姜子牙', '13000130030', 'jiangziya@example.com', '法师', 60, 1, 1, '2025-01-30 10:00:00');

select *
from tb_user;

# 更新 tb_user 表的 status 字段，随机为 0-6 之间的数字
update tb_user
set status = floor(rand() * 7);

select * from tb_user;
select * from tb_user where status = 0;
